import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Stack;
import java.util.LinkedList;
import Helpers.HMAC;

public class Huffman {

	private static final int ALPHABET_COUNT = 256;
	private static final boolean INCLUDE_ZEROS = true;
	
	private HashMap<Byte, String> code_book;
	
	private int input_count[];
	private int totalchars;
	
	private byte[] uncompressed_msg;
	
	private ArrayList<HuffmanNode> leaves;
	private ArrayList<HuffmanNode> freqs;
	private ArrayList<Byte> msg;
	private ArrayList<String> leaf_values;
	
	private String key;
	private String hmac_bit_string;
	private String compressed_msg;
	private String tree_structure;
	
	private HuffmanNode root;
	
	public static void main(String[] args) {
		String keyfile, inputfile, treefile;
		keyfile = "input/bst_test_key.txt";
		inputfile = "input/huff_test_mssg.txt";	
		treefile = "output/1b_clean.txt";
		
		Huffman h = new Huffman(keyfile, inputfile);
		//Huffman h = new Huffman(keyfile, treefile, 1);
	}
	
	public Huffman(String file1, String file2, int val) {
		freqs = new ArrayList<HuffmanNode>();
		msg = new ArrayList<Byte>();
		
		key = "";
		tree_structure = "";
		compressed_msg = "";
		
		leaves = new ArrayList<HuffmanNode>();
		leaf_values = new ArrayList<String>();
		
		readKey(file1);
		readTree(file2);	
		constructTree();
		
		
		input_count = new int[ALPHABET_COUNT];
		for (int i = 0; i < ALPHABET_COUNT; i++)
			input_count[i] = 0;
		
		
		int length = msg.size();
		uncompressed_msg = new byte[length];
		totalchars = length;
		for (int i = 0; i < length; i++) {
			uncompressed_msg[i] = msg.get(i); 
			input_count[(int)msg.get(i)]++;
		}
		
		calculateFrequency();
		
		for (HuffmanNode n: leaves) {
			for (HuffmanNode f : freqs) {
				if (n.symbol.equals(f.symbol)) {
					n.frequency = f.frequency;
				}
			}
		}
		
		byte[] hmac = HMAC.encode(uncompressed_msg, key);
		hmac_bit_string = HMAC.toBitString(hmac);
		System.out.println(hmac_bit_string);
		buildUp();
		extractMark();
	}

	public void extractMark() {
		CustomComparator cmp = new CustomComparator();
		LinkedList<HuffmanNode> queue = new LinkedList<HuffmanNode>();
		queue.add(root);
		while (queue.size() > 0) {
			HuffmanNode n = queue.removeFirst();
			if (n.hasChildren()) {
				queue.add(n.leftChild);
				queue.add(n.rightChild);
				
				if (cmp.compare(n.leftChild, n.rightChild) < 0) {
					System.out.print("0");
				}
				else {
					System.out.print("1");
				}
			}
		}
		
	}
	
	public void buildUp() {
		CustomComparator cmp = new CustomComparator();
		
		LinkedList<HuffmanNode> queue = new LinkedList<HuffmanNode>();
		ArrayList<HuffmanNode> excludelist = new ArrayList<HuffmanNode>();
		LinkedList<HuffmanNode> nodes;
		while (true) {
			nodes = new LinkedList<HuffmanNode>();
			queue.add(root);
			while (queue.size() > 0) {
				HuffmanNode tmp = queue.removeFirst();
				if (tmp.hasChildren() && tmp.symbol.equals("")) {
					queue.add(tmp.leftChild);
					queue.add(tmp.rightChild);
				}
				else {
					if (!excludelist.contains(tmp)) {
						nodes.addFirst(tmp);
					}
				}
			}
			
			HuffmanNode r = nodes.removeFirst();
			HuffmanNode l = nodes.removeFirst();
			
			if (r.parent != l.parent){
				System.out.println("Broke");
			}
			
			if (cmp.compare(l, r) < 0) {
				r.parent.symbol = l.symbol + r.symbol;
				r.mark = '0';
				l.mark = '1';
			} else {
				r.parent.symbol = r.symbol + l.symbol;
				l.mark = '0';
				r.mark = '1';
			}
			
			r.parent.frequency = r.frequency + l.frequency;
			
			excludelist.add(r);
			excludelist.add(l);
			
			if (r.parent == root)
				break;
		}
	}
	public Huffman(String file1, String file2) {
		freqs = new ArrayList<HuffmanNode>();
		msg = new ArrayList<Byte>();
		
		input_count = new int[ALPHABET_COUNT];
		key = "";
		hmac_bit_string = "";
		leaves = new ArrayList<HuffmanNode>();
		code_book = new HashMap<Byte, String>();
		
		for (int i = 0; i < ALPHABET_COUNT; i++)
			input_count[i] = 0;
		
		readKey(file1);
		readMsg(file2);
		calculateFrequency();
		createFrequencyTree();
		
		int length = msg.size();
		uncompressed_msg = new byte[length];
		
		for (int i = 0; i < length; i++) {
			uncompressed_msg[i] = msg.get(i); 
		}
		
		byte[] hmac = HMAC.encode(uncompressed_msg, key);
		hmac_bit_string = HMAC.toBitString(hmac);
		System.out.println(hmac_bit_string);
		markTree();
		
		extractMark();
		System.out.println();
		//printBFS();
		
		//generateCodeBook();
		//printLeaves();
		codeBook2();
		System.out.println
		printCompressedMsg();
		System.out.println();
		System.out.println(code_book.get((byte)'\n'));
	}
	
	public void codeBook2() {
		getMark2(root, "");
	}
	
	private void getMark2(HuffmanNode n, String mark) {
		CustomComparator cmp = new CustomComparator();
		
		if (!n.hasChildren()) {
			byte b = (byte)n.symbol.charAt(0);
			code_book.put(b, mark);
			return;
		}
		
		if (cmp.compare(n.leftChild, n.rightChild) < 0) {
			getMark2(n.leftChild, mark + "0");
			getMark2(n.rightChild, mark + "1");
		}
		else {
			getMark2(n.leftChild, mark + "0");
			getMark2(n.rightChild, mark + "1");
		}
		

	}
	
	public void constructTree() {
		LinkedList<HuffmanNode> queue = new LinkedList<HuffmanNode>();
		root = new HuffmanNode("", 0);
		queue.add(root);
		int tree_index = 0;
		int leaf_index = 0;
		while (queue.size() > 0) {
			HuffmanNode tmp = queue.removeFirst();
			if (tree_structure.charAt(tree_index) == '1') {
				HuffmanNode l = new HuffmanNode("", 0);
				HuffmanNode r = new HuffmanNode("", 0);
				tmp.leftChild = l;
				tmp.rightChild = r;
				l.parent = tmp;
				r.parent = tmp;
				queue.add(l);
				queue.add(r);
			}
			else {
				tmp.symbol = leaf_values.get(leaf_index);
				leaves.add(tmp);
				leaf_index++;
			}
			tree_index++;
		}
	
		HuffmanNode current = root;
		
		for (int i = 0; i < compressed_msg.length(); i++) {
			char mark = compressed_msg.charAt(i);
			if (mark == '0') {
				current = current.leftChild;
			} else {
				current = current.rightChild;
			}
			
			if (!current.hasChildren()) {
				byte b = (byte)current.symbol.charAt(0);
				msg.add(b);
				//System.out.print((char)current.symbol.charAt(0));
				current = root;
			}
		}
	}
	
	public void readTree(String filename) {
		File file = new File(filename);
		try {
			Scanner scr = new Scanner(file);
			if (!scr.hasNextLine()) {
				System.out.println("Invalid File");
				System.exit(0);
			} else {
				tree_structure = scr.nextLine();
				int length = tree_structure.length();
				int count = 0;
				for (int i = 0; i < length; i++) {
					if (tree_structure.charAt(i) == '0')
						count++;
				}
				while (count > 0) {
					if (!scr.hasNextLine()) {
						System.out.println("Invalid Tree Format: Not Enough Leaves");
						System.exit(0);
					}
					String leaf = scr.nextLine();
					byte b = Byte.valueOf(leaf);
					leaf_values.add((char)b + "");
					count--;
				}
				if (!scr.hasNextLine()) {
					System.out.println("Invalid Tree Format: No Compressed Message");
					System.exit(0);
				}
				compressed_msg = scr.nextLine();
			}
		} catch (FileNotFoundException e) {
			System.out.println(e);
			System.exit(0);
		}
	}
	
	
	public void printCompressedMsg() {
		for (int i = 0; i < uncompressed_msg.length; i++) {
			System.out.print(code_book.get(uncompressed_msg[i]));
		}
	}
	
	public void printLeaves() {
		int length = leaves.size();
		for (int i = 0; i < length; i++) {
			byte b = (byte) leaves.get(i).symbol.charAt(0);
			System.out.println(b);
		}
	}
	
	public void generateCodeBook() {
		getMark(root.rightChild, "");
		getMark(root.leftChild, "");
	}
	
	private void getMark(HuffmanNode n, String mark) {
		if (!n.hasChildren()) {
			mark = mark + n.mark;
			byte b = (byte)n.symbol.charAt(0);
			code_book.put(b, mark);
			return;
		}
		
		getMark(n.leftChild, mark + n.mark);
		getMark(n.rightChild, mark + n.mark);
	}
	
	public void readKey(String filename) {
		File file = new File(filename);		
		try {
			Scanner scr = new Scanner(file);
			if (!scr.hasNextLine()) {
				System.out.println("Invalid Key");
				System.exit(0);
			} else {
				key = scr.nextLine();
			}
		} catch (FileNotFoundException e) {
			System.out.println(e);
			System.exit(0);
		}
	}
	
	public void readMsg(String str) {
		try {
			InputStream is = new FileInputStream(str);
			while(is.available() > 0) {
				int b = is.read();
				input_count[b]++;
				totalchars += 1;
				msg.add((byte)b);	
			}
		} catch (IOException e) {
			System.out.println(e);
			System.exit(0);
		}
	}

	public void calculateFrequency() {
		for (int i = 0; i < ALPHABET_COUNT; i++) {
			double f = (input_count[i]) / ((double)totalchars);	
			
			if (INCLUDE_ZEROS) {
				freqs.add(new HuffmanNode((char)i + "", f));
			}
			
			if (!INCLUDE_ZEROS) {
				if (input_count[i] != 0)
					freqs.add(new HuffmanNode((char)i + "", f));
			}
		}
	}
	
	public void createFrequencyTree() {
		while (freqs.size() > 1) {
			Collections.sort(freqs, new CustomComparator());
			HuffmanNode right = freqs.remove(0);
			HuffmanNode left = freqs.remove(0);
			HuffmanNode parent = new HuffmanNode(right.symbol + left.symbol, right.frequency + left.frequency);
			
			parent.rightChild = right;
			parent.leftChild = left;
			
			freqs.add(parent);
		}
		root = freqs.get(0);
	}
	
	@SuppressWarnings("unused")
	private void printInputMsg() {
		for (int i = 0; i < ALPHABET_COUNT; i++) {
			if (INCLUDE_ZEROS) {
				System.out.println(i + ": " + input_count[i]);
			}
			
			if (!INCLUDE_ZEROS) {
				if (input_count[i] != 0)
					System.out.println(i + ": " + input_count[i]);
			}
		}
	}
	
	@SuppressWarnings("unused")
	private void printFrequency() {
		int length = freqs.size();
		for (int i = 0; i < length; i++) {
			System.out.println(freqs.get(i).symbol + ": " + freqs.get(i).frequency);
		}
	}
	
	public void printBFS() {
		printBFS(root);
		System.out.println();
	}    

	private void printBFS(HuffmanNode n) {
		LinkedList<HuffmanNode> queue = new LinkedList<HuffmanNode>();
		queue.add(n);
		while (queue.size() > 0) {
			HuffmanNode tmp = queue.removeFirst();
			if (tmp.hasChildren()) {
				System.out.print("1");
				queue.add(tmp.leftChild);
				queue.add(tmp.rightChild);
			}
			else {
				System.out.print("0");
				leaves.add(tmp);
			}
		}
	}
	
	public void markTree() {
		LinkedList<HuffmanNode> queue = new LinkedList<HuffmanNode>();
		int index = 0;
		queue.add(root);
	
		while (queue.size() > 0) {
			HuffmanNode n = queue.removeFirst();
			char mark = hmac_bit_string.charAt(index);
			
			if (n.hasChildren()) {
				HuffmanNode least_weighty;
				HuffmanNode most_weighty;
				
				CustomComparator cmp = new CustomComparator();
				
				if (cmp.compare(n.leftChild, n.rightChild) < 0) {
					least_weighty = n.leftChild;
					most_weighty = n.rightChild;
				} else {
					least_weighty = n.rightChild;
					most_weighty = n.leftChild;
				}
				
				if (mark == '1') {
					//n.rightChild.mark = '1';
					//n.leftChild.mark = '0';
					n.rightChild = least_weighty;					
					n.leftChild = most_weighty;
				} else if (mark == '0') {
					//n.rightChild.mark = '0';
					//n.leftChild.mark = '1';
					n.rightChild = most_weighty;
					n.leftChild = least_weighty;
				}
				
				queue.add(n.leftChild);
				queue.add(n.rightChild);	
				
				index += 1;
			}	
		}
	}
}
